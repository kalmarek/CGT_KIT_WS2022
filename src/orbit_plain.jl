"""
    orbit_plain(x, S[, action=^])
Compute the orbit of `x` under the action of a group `G` generated by set `S`.

It is assumed that elements `g ∈ G` act on `x` _on the right_ via `action(x, g)`.

### Input
 * `x` - point in a set `Ω`
 * `S` - finite generating set for `G = ⟨S⟩`.
 * `action` - action of `G` on `Ω` from the right, defaulting to `^`.
### Output
 * `{xᵍ | g ∈ G}` - the orbit of `x` under the action of `G`, returned as a `Vector`.
"""
orbit_plain(x, S::AbstractVector{<:GroupElement}, action=^) = orbit_plain!([x], S, action)

function orbit_plain!(x::AbstractVector, S::AbstractVector{<:GroupElement}, action=^)
    @assert !isempty(S) # groups need generators
    Δ_vec = x
    Δ = Set(Δ_vec)
    for δ in Δ_vec
        for s in S
            γ = action(δ, s)
            if γ ∉ Δ
                push!(Δ, γ)
                push!(Δ_vec, γ)
            end
        end
    end
    return Δ_vec
end

"""
    transversal(x, S::AbstractVector{<:GroupElement}[, action=^])
Compute the orbit `Δ` and a transversal `T` of `x ∈ Ω` under the action of `G = ⟨S⟩`.

Transversal is a set of representatives of left cosets `Stab_G(x)\\G` satisfying

    x^T[γ] = γ

for every `γ ∈ Δ`.

It is assumed that elements `G` act on `Ω` _on the right_ via `action(x, g)`.

### Input
 * `x` - point in set `Ω`,
 * `S` - finite generating set for `G = ⟨S⟩`,
 * `action` - function defining an action of `G` on `Ω` from the right. Defaults to `^`.
### Output
 * `Δ::Vector` - the orbit of `x` under the action of `G`.
 * `T::Dict` - a transversal.
"""
function transversal(x, S::AbstractVector{<:GroupElement}, action=^)
    @assert !isempty(S)

	return Δ, T
end

function transversal_factored(x, S::AbstractVector{<:GroupElement}, action=^)
    @assert !isempty(S)

    return Δ, T
end

"""
    schreier(x, S::AbstractVector{<:GroupElement}[, action=^])
Compute the orbit and a Schreier tree of `x ∈ Ω` under the action of `G = ⟨S⟩`.

It is assumed that elements `G` act on `Ω` _on the right_ via `action(x, g)`.

### Input
 * `x` - point in set `Ω`,
 * `S` - finite generating set for `G = ⟨S⟩`,
 * `action` - function defining an action of `G on `Ω` from the right. Defaults to `^`.
### Output
 * `Δ::Vector` - the orbit of `x` under the action of `G`, as a `Vector`.
 * `Sch::Dict` - a Schreier tree, satisfying `Sch[action(γ, s)] == s` for every `γ ∈ Δ` and every `s ∈ S`.
"""
function schreier(x, S::AbstractVector{<:GroupElement}, action=^)
    @assert !isempty(S)

    return Δ, Sch
end

"""
	representative(y, S, Δ, Sch[, action=^])
Compute a representative `g` of left-coset `Stab_G(x)g` corresponding to point `y ∈ Δ` in the orbit of `x`.

## Input
* `y` - a point in `Δ`,
* `S` - a set of generators for `G = ⟨S⟩`,
* `Δ` - the orbit of `x` under the action of `G`,
* `Sch` - a Schreier tree for `Δ` and `S`.
## Output
* `g ∈ G` such that `xᵍ = y`.
"""
function representative(y, S::AbstractVector{<:GroupElement}, Δ, Sch, action=^)

    return g
end
